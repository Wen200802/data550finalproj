theta1 <- result$theta[2]
theta2 <- result$theta[3]
theta0
theta1
theta2
plot(data$exam1, data$exam2,
col = ifelse(data$admission == 1, "orange", "red"),
pch = 16,
xlab = "Exam 1 Score",
ylab = "Exam 2 Score")
curve(-(result$theta0 + result$theta1 * x) / result$theta2, add = TRUE, col = "black", lwd = 2)
plot(data$exam1, data$exam2,
col = ifelse(data$admission == 1, "orange", "red"),
pch = 16,
xlab = "Exam 1 Score",
ylab = "Exam 2 Score")
curve(-(theta0 + theta1 * x) / theta2, add = TRUE, col = "black", lwd = 2)
theta0 <- result[1]
theta1 <- result[2]
theta2 <- result[3]
# Print the values to verify
print(theta0)
print(theta1)
print(theta2)
# Extract theta values from the result
theta0 <- result$theta[1, 1]
theta1 <- result$theta[2, 1]
theta2 <- result$theta[3, 1]
# Print the theta values to confirm
print(theta0)
print(theta1)
print(theta2)
# Extract only the numeric values from the theta matrix
theta_values <- as.numeric(result$theta)
# Assign the individual theta values
theta0 <- theta_values[1]
theta1 <- theta_values[2]
theta2 <- theta_values[3]
# Print the theta values to confirm
print(theta0)
print(theta1)
print(theta2)
plot(data$exam1, data$exam2,
col = ifelse(data$admission == 1, "orange", "red"),
pch = 16,
xlab = "Exam 1 Score",
ylab = "Exam 2 Score")
curve(-(theta0 + theta1 * x) / theta2, add = TRUE, col = "black", lwd = 2)
plot(data$exam1, data$exam2,
col = ifelse(data$admission == 1, "orange", "red"),
pch = 16,
xlab = "Exam 1 Score",
ylab = "Exam 2 Score")
curve(-(theta0 + theta1 * x) / theta2, add = TRUE, col = "black", lwd = 2)
# Plot the original data points with explicit limits for better visualization
plot(data$exam1, data$exam2,
col = ifelse(data$admission == 1, "orange", "red"),
pch = 16,
xlab = "Exam 1 Score",
ylab = "Exam 2 Score",
xlim = c(min(data$exam1), max(data$exam1)),
ylim = c(min(data$exam2), max(data$exam2)),
main = "Scatter Plot with Decision Boundary")
# Generate a sequence of x-values to plot the decision boundary
x_values <- seq(min(data$exam1), max(data$exam1), length.out = 100)
# Compute y-values for the decision boundary
y_values <- -(theta0 + theta1 * x_values) / theta2
# Add the decision boundary line
lines(x_values, y_values, col = "black", lwd = 2)
print(paste("Theta values:", theta0, theta1, theta2))
print(y_values)
plot(data$exam1, data$exam2,
col = ifelse(data$admission == 1, "orange", "red"),
pch = 16,
xlab = "Exam 1 Score",
ylab = "Exam 2 Score")
curve(-(theta0 + theta1 * x) / theta2, add = TRUE, col = "black", lwd = 2)
# Normalize the exam scores
exam1_score <- 68
exam2_score <- 75
# Calculate the decision value
decision_value <- theta0 + theta1 * exam1_score + theta2 * exam2_score
prediction <- ifelse(decision_value >= 0,"Admitted", "Not Admitted")
cat("Decision Value:", decision_value, "\nPrediction:", prediction, "\n")
# Create the main plot with adjusted limits
plot(data$exam1, data$exam2,
col = ifelse(data$admission == 1, "orange", "red"),
pch = 19, xlab = "Exam 1 Score", ylab = "Exam 2 Score",
main = "Decision Boundary")
curve(-(theta0 + theta1 * x) / theta2, add = TRUE, col = "black", lwd = 2)
# Add the new student's point
points(exam1_score, exam2_score, col = "purple", pch = 4, cex = 2)
# Print prediction for the new student
print(paste("The predicted admission status for the new student is:",
ifelse(prediction >= 0, "Admitted", "Not Admitted")))
x1 = data$exam1
x= (-theta0-thete1*x1)/theta2
x1 = data$exam1
x= (-theta0-theta1*x1)/theta2
plot(data$exam1, data$exam2,
col = ifelse(data$admission == 1, "orange", "red"),
pch = 16,
xlab = "Exam 1 Score",
ylab = "Exam 2 Score")
curve(-(theta0 + theta1 * x) / theta2, add = TRUE, col = "black", lwd = 2)
plot(data$exam1, data$exam2,
col = ifelse(data$admission == 1, "orange", "red"),
pch = 16,
xlab = "Exam 1 Score",
ylab = "Exam 2 Score")
curve(-(theta0 + theta1 * x) / theta2, add = TRUE, col = "black", lwd = 2)
# Normalize the exam scores
exam1_score <- 68
exam2_score <- 75
# Calculate the decision value
decision_value <- theta0 + theta1 * exam1_score + theta2 * exam2_score
prediction <- ifelse(decision_value >= 0,"Admitted", "Not Admitted")
cat("Decision Value:", decision_value, "\nPrediction:", prediction, "\n")
# Create the main plot with adjusted limits
plot(data$exam1, data$exam2,
col = ifelse(data$admission == 1, "orange", "red"),
pch = 19, xlab = "Exam 1 Score", ylab = "Exam 2 Score",
main = "Decision Boundary")
curve(-(theta0 + theta1 * x) / theta2, add = TRUE, col = "black", lwd = 2)
# Add the new student's point
points(exam1_score, exam2_score, col = "purple", pch = 4, cex = 2)
# Print prediction for the new student
print(paste("The predicted admission status for the new student is:",
ifelse(prediction >= 0, "Admitted", "Not Admitted")))
load("~/downloads/lead_long.RData")
placebo_data <- subset(dat, Group == "P" )
View(placebo_data)
load("~/downloads/lead_long.RData")
# Load necessary library
library(lme4)
# Assuming beta coefficients have been estimated as follows:
# (replace these with the actual estimates from your model output)
beta0 <- coef["(Intercept)"]
load("~/downloads/lead_long.RData")
# Load necessary library
library(lme4)
# Time points
time <- c(0, 2, 4)
# Treatment effect at each time point
model1 <- lmer { lead ~ time + I(time^2) + Time:Group + Time^2:Group}
load("~/downloads/lead_long.RData")
install.packages("gee")
library(gee)
# Time points
time <- c(0, 2, 4)
# Treatment effect at each time point
model1 <- gee(lead ~ time + I(time^2) + Time:Group + Time^2:Group, id=ID, data=treatm_data, family = gaussian, corstr = "independence")
load("~/downloads/lead_long.RData")
install.packages("gee")
library(gee)
# Time points
time <- c(0, 2, 4)
# Treatment effect at each time point
model1 <- gee(lead ~ time + I(time^2) + Time:Group + Time^2:Group, id=ID, data=dat, family = gaussian, corstr = "independence")
# Time points
time <- c(0, 2, 4)
# Treatment effect at each time point
model1 <- gee(lead ~ time + I(time^2) + time:Group + time^2:Group, id=ID, data=dat, family = gaussian, corstr = "independence")
model1
# Extract fixed effects
fixed_effects <- fixef(model1)
# Time points
time <- c(0, 2, 4)
# Treatment effect at each time point
model1 <- gee(lead ~ time + I(time^2) + time:Group + I(time^2:Group), id=ID, data=dat, family = gaussian, corstr = "independence")
# Time points
time <- c(0, 2, 4)
# Treatment effect at each time point
model1 <- gee(lead ~ time + Group + I(time^2) + time:Group + I(time^2:Group), id=ID, data=dat, family = gaussian, corstr = "independence")
dat <- na.omit(dat)
# Time points
time <- c(0, 2, 4)
# Treatment effect at each time point
model1 <- gee(lead ~ time + Group + I(time^2) + time:Group + I(time^2:Group), id=ID, data=dat, family = gaussian, corstr = "independence")
load("~/downloads/lead_long.RData")
install.packages("gee")
library(gee)
# Time points
time <- c(0, 2, 4)
# Treatment effect at each time point
model1 <- gee(lead ~ time + Group + I(time^2) + time:Group + I(time^2:Group), id=ID, data=dat, family = gaussian, corstr = "independence")
load("~/downloads/lead_long.RData")
install.packages("gee")
library(gee)
# Time points
time <- c(0, 2, 4)
# Treatment effect at each time point
model1 <- gee(lead ~ time + Group + I(time^2) + time:Group + I(time^2:Group), id=ID, data=dat, family = gaussian, corstr = "unstructured")
# Treatment effect at each time point
model1 <- gee(lead ~ time + Group + I(time^2) + time:Group + I(time^2:Group), id=ID, data=dat, family = gaussian, corstr = "unstructured")
load("~/downloads/lead_long.RData")
install.packages("gee")
library(gee)
# Treatment effect at each time point
model1 <- gee(lead ~ time + Group + I(time^2) + time:Group + I(time^2:Group), id=ID, data=dat, family = gaussian, corstr = "unstructured")
load("~/downloads/lead_long.RData")
install.packages("gee")
library(gee)
# Treatment effect at each time point
model1 <- gee(lead ~ time + Group + I(time^2) + time:Group + I(time^2:Group), id=ID, data=dat, family = gaussian, corstr = "unstructured")
load("~/downloads/lead_long.RData")
install.packages("gee")
library(gee)
# Treatment effect at each time point
model1 <- gee(lead ~ time + Group + I(time^2) + time:Group + I(time^2:Group), id=ID, data=dat, family = gaussian, corstr = "unstructured")
load("~/downloads/lead_long.RData")
install.packages("gee")
library(gee)
# Treatment effect at each time point
model1 <- gee(lead ~ time + Group + I(time^2) + time:Group + I(time^2:Group), id=ID, data=dat, family = gaussian, corstr = "unstructured")
load("~/downloads/lead_long.RData")
install.packages("gee")
library(gee)
# Treatment effect at each time point
model1 <- gee(lead ~ time + Group + I(time^2) + time:Group + I(time^2):Group, id=ID, data=dat, family = gaussian, corstr = "unstructured")
summary(model1)
# Extract coefficients and variance-covariance matrix
coef_est <- coef(model1)
vcov_matrix <- model1$robust.variance  # Use robust variance for GEE
# Define coefficients
beta1 <- coef_est["Group"]
beta4 <- coef_est["time:Group"]
beta5 <- coef_est["I(time^2):Group"]
# Define treatment effect function
treatment_effect <- function(t) {
beta1 + beta4 * t + beta5 * t^2
}
# Standard error calculation
treatment_se <- function(t) {
sqrt(
vcov_matrix["Group", "Group"] +
(t^2) * vcov_matrix["time:Group", "time:Group"] +
(t^4) * vcov_matrix["I(time^2):Group", "I(time^2):Group"] +
2 * t * vcov_matrix["Group", "time:Group"] +
2 * (t^2) * vcov_matrix["Group", "I(time^2):Group"] +
2 * (t^3) * vcov_matrix["time:Group", "I(time^2):Group"]
)
}
# Confidence interval calculation
treatment_effect_with_ci <- function(t) {
effect <- treatment_effect(t)
se <- treatment_se(t)
ci <- c(effect - 1.96 * se, effect + 1.96 * se)  # 95% CI
list(estimate = effect, CI = ci)
}
# Compute treatment effect and CI at weeks 0, 2, 4
time_points <- c(0, 2, 4)
results <- lapply(time_points, treatment_effect_with_ci)
# Extract coefficients and variance-covariance matrix
coef_est <- coef(model1)
vcov_matrix <- model1$robust.variance  # Use robust variance for GEE
# Define coefficients
beta1 <- coef_est["Group"]
beta4 <- coef_est["time:Group"]
beta5 <- coef_est["I(time^2):Group"]
# Define treatment effect function
treatment_effect <- function(t) {
beta1 + beta4 * t + beta5 * t^2
}
# Standard error calculation
treatment_se <- function(t) {
sqrt(
vcov_matrix["Group", "Group"] +
(t^2) * vcov_matrix["time:Group", "time:Group"] +
(t^4) * vcov_matrix["I(time^2):Group", "I(time^2):Group"] +
2 * t * vcov_matrix["Group", "time:Group"] +
2 * (t^2) * vcov_matrix["Group", "I(time^2):Group"] +
2 * (t^3) * vcov_matrix["time:Group", "I(time^2):Group"]
)
}
# Confidence interval calculation
treatment_effect_with_ci <- function(t) {
effect <- treatment_effect(t)
se <- treatment_se(t)
ci <- c(effect - 1.96 * se, effect + 1.96 * se)  # 95% CI
list(estimate = effect, CI = ci)
}
# Compute treatment effect and CI at weeks 0, 2, 4
time_points <- c(0, 2, 4)
results <- lapply(time_points, treatment_effect_with_ci)
# Extract coefficients and variance-covariance matrix
coef_est <- coef(model1)
vcov_matrix <- model1$robust.variance  # Use robust variance for GEE
# Display coefficient names and variance-covariance names to match correctly
print(names(coef_est))
print(dimnames(vcov_matrix))
# Assign coefficients based on correct names (adjust names based on your output)
beta1 <- coef_est["Group"]  # Coefficient for Group (treatment effect baseline)
beta4 <- coef_est["time:Group"]  # Interaction term for time and Group
beta5 <- coef_est["I(time^2):Group"]  # Interaction term for quadratic time and Group
# Function to compute treatment effect
treatment_effect <- function(t) {
beta1 + beta4 * t + beta5 * t^2
}
# Function to compute standard error and confidence interval
treatment_se <- function(t) {
sqrt(
vcov_matrix["Group", "Group"] +
(t^2) * vcov_matrix["time:Group", "time:Group"] +
(t^4) * vcov_matrix["I(time^2):Group", "I(time^2):Group"] +
2 * t * vcov_matrix["Group", "time:Group"] +
2 * (t^2) * vcov_matrix["Group", "I(time^2):Group"] +
2 * (t^3) * vcov_matrix["time:Group", "I(time^2):Group"]
)
}
# Function to compute treatment effect and 95% confidence intervals
treatment_effect_with_ci <- function(t) {
effect <- treatment_effect(t)
se <- treatment_se(t)
ci <- c(effect - 1.96 * se, effect + 1.96 * se)  # 95% CI
list(estimate = effect, CI = ci)
}
# Compute treatment effect and CI at weeks 0, 2, and 4
time_points <- c(0, 2, 4)
results <- lapply(time_points, treatment_effect_with_ci)
# Extract coefficients and variance-covariance matrix
coef_est <- coef(model1)
vcov_matrix <- model1$robust.variance
# Treatment effect calculation function
treatment_effect_with_ci <- function(t) {
# Extract coefficients using positional indexing
beta1 <- coef_est[2]   # Coefficient for Group
beta4 <- coef_est[4]   # Coefficient for time:Group
beta5 <- coef_est[5]   # Coefficient for I(time^2):Group
# Compute treatment effect
effect <- beta1 + beta4 * t + beta5 * t^2
# Standard error calculation using positional indexing in vcov_matrix
se <- sqrt(
vcov_matrix[2, 2] +                     # Var(Group)
(t^2) * vcov_matrix[4, 4] +             # Var(time:Group)
(t^4) * vcov_matrix[5, 5] +             # Var(I(time^2):Group)
2 * t * vcov_matrix[2, 4] +             # Cov(Group, time:Group)
2 * (t^2) * vcov_matrix[2, 5] +         # Cov(Group, I(time^2):Group)
2 * (t^3) * vcov_matrix[4, 5]           # Cov(time:Group, I(time^2):Group)
)
# Confidence interval
ci <- c(effect - 1.96 * se, effect + 1.96 * se)  # 95% CI
list(estimate = effect, CI = ci)
}
# Calculate treatment effects and CIs for weeks 0, 2, and 4
time_points <- c(0, 2, 4)
results <- lapply(time_points, treatment_effect_with_ci)
# Assign readable names to results
names(results) <- paste("Week", time_points)
# Print results
results
coefficients <- summary_model$coefficients
coefficients <- model1$coefficients
beta1 <- coefficients["GroupP", "Estimate"]
setwd
setwd("~/documents/data550/finalproject")
renv::init()
renv::status()
print(.libPaths())
.libPaths()
renv::paths$library()
tt <- read.table("~/downloads/2by2.txt")
tt <- read.table("~/downloads/2by2.txt")
# Count the number of people in group A (group == 1) or group B (group == 2)
count_group_a <- length(unique(tt$ID[tt$group == 1]))
count_group_b <- length(unique(tt$ID[tt$group == 2]))
# Display the counts
cat("Number of people in group A:", count_group_a, "\n")
cat("Number of people in group B:", count_group_b, "\n")
tt <- read.table("~/downloads/2by2.txt", header = TRUE)
# Count the number of people in group A (group == 1) or group B (group == 2)
count_group_a <- length(unique(tt$ID[tt$group == 1]))
count_group_b <- length(unique(tt$ID[tt$group == 2]))
# Display the counts
cat("Number of people in group A:", count_group_a, "\n")
cat("Number of people in group B:", count_group_b, "\n")
# Create a frequency table of Group and Outcome
freq_table <- with(tt, table(group, outcome))
# Print the frequency table
print(freq_table)
# Group 1
group_1_data <- data[data$group == 1, ]
group_1_data <- data[tt$group == 1, ]
# Group 1
group_1_data <- data[tt$group == 1]
# Group 1 Data
group_1_data <- tt[tt$group == 1, ]
freq_table_group_1 <- table(group_1_data$period, group_1_data$outcome)
# Group 2 Data
group_2_data <- tt[tt$group == 2, ]
freq_table_group_2 <- table(group_2_data$period, group_2_data$outcome)
# Print frequency tables for each group
cat("Frequency Table for Group 1:\n")
print(freq_table_group_1)
cat("\nFrequency Table for Group 2:\n")
print(freq_table_group_2)
# Group 1 Data
group_1_data <- tt[tt$group == 1, ]
freq_table_group_1 <- table(group_1_data$period, group_1_data$outcome)
# Group 2 Data
group_2_data <- tt[tt$group == 2, ]
freq_table_group_2 <- table(group_2_data$period, group_2_data$outcome)
# Manually calculate the counts for each combination (period, outcome) for Group 1 and Group 2
group_1_counts <- c(freq_table_group_1[1, 1], freq_table_group_1[1, 2], freq_table_group_1[2, 1], freq_table_group_1[2, 2])
group_2_counts <- c(freq_table_group_2[1, 1], freq_table_group_2[1, 2], freq_table_group_2[2, 1], freq_table_group_2[2, 2])
# Print the counts to match the desired format
cat("Group 1 (0,0):", group_1_counts[1], "(0,1):", group_1_counts[2], "(1,0):", group_1_counts[3], "(1,1):", group_1_counts[4], "\n")
cat("Group 2 (0,0):", group_2_counts[1], "(0,1):", group_2_counts[2], "(1,0):", group_2_counts[3], "(1,1):", group_2_counts[4], "\n")
# Group 1 Data - Count occurrences of each (period, outcome) combination
group_1_counts <- tt %>%
filter(group == 1) %>%
count(period, outcome) %>%
complete(period = c(0, 1), outcome = c(0, 1), fill = list(n = 0))
install.packages("dplyr")
install.packages("tidyr")
library(dplyr)
library(tidyr)
# Group 1 Data - Count occurrences of each (period, outcome) combination
group_1_counts <- tt %>%
filter(group == 1) %>%
count(period, outcome) %>%
complete(period = c(0, 1), outcome = c(0, 1), fill = list(n = 0))
# Group 2 Data - Count occurrences of each (period, outcome) combination
group_2_counts <- tt %>%
filter(group == 2) %>%
count(period, outcome) %>%
complete(period = c(0, 1), outcome = c(0, 1), fill = list(n = 0))
# Extract counts in the desired order
group_1_result <- group_1_counts$n
group_2_result <- group_2_counts$n
# Print results for Group 1
cat("Group 1 (0,0):", group_1_result[1], "(0,1):", group_1_result[2], "(1,0):", group_1_result[3], "(1,1):", group_1_result[4], "\n")
# Print results for Group 2
cat("Group 2 (0,0):", group_2_result[1], "(0,1):", group_2_result[2], "(1,0):", group_2_result[3], "(1,1):", group_2_result[4], "\n")
group2_data <- dat[dat$group == 2, ]
group2_data <- tt[tt$group == 2, ]
group2_wide <- reshape(
group2_data,
idvar = "ID",
timevar = "period",  # Pivot by 'period'
direction = "wide"
)
freq_table <- table(
group2_wide$outcome.0,
group2_wide$outcome.1
)
print(freq_table)
gee_model <- gee(
outcome ~ trt + period,
data = dat,
family = binomial(link = "logit"),
id = ID,
corstr = "exchangeable"
)
library(gee)
gee_model <- gee(
outcome ~ trt + period,
data = dat,
family = binomial(link = "logit"),
id = ID,
corstr = "exchangeable"
)
library(gee)
gee_model <- gee(
outcome ~ trt + period,
data = tt,
family = binomial(link = "logit"),
id = ID,
corstr = "exchangeable"
)
summary(gee_model)
m2 <- glm(formula = outcome ~ trt + period + outcome_pat, family = binomial,
data = tt)
outcome_pat == "(0,0)" ~ 1,
tt <- tt %>%
mutate(outcome_pat = case_when(
period == 0 & outcome == 0 ~ "(0,0)",
period == 0 & outcome == 1 ~ "(0,1)",
period == 1 & outcome == 0 ~ "(1,0)",
period == 1 & outcome == 1 ~ "(1,1)"
))
m2 <- glm(formula = outcome ~ trt + period + outcome_pat, family = binomial,
data = tt)
summary(m2)
rmd_1 <- glmer(
outcome ~ trt + period + trt * period + (1 | ID),
data = dat,
family = binomial(link = "logit")
)
rmd_1 <- glmer(
outcome ~ trt + period + trt * period + (1 | ID),
data = tt,
family = binomial(link = "logit")
)
install.packages("lme4")
library(lme4)
rmd_1 <- glmer(
outcome ~ trt + period + trt * period + (1 | ID),
data = tt,
family = binomial(link = "logit")
)
summary(rmd_1)
tt <- tt %>%
mutate(outcome_pat = case_when(
period == 0 & outcome == 0 ~ "(0,0)",
period == 0 & outcome == 1 ~ "(0,1)",
period == 1 & outcome == 0 ~ "(1,0)",
period == 1 & outcome == 1 ~ "(1,1)"
))
m2 <- glm(outcome ~ trt + period + outcome_pat, family = binomial,
data = tt)
summary(m2)
